syntax = "proto3";
package proto;
option go_package = "./proto";

service PersonService {
    rpc create(PersonCreateRequest)returns(Response);
    rpc get(Id)returns(Person);
    rpc update(PersonUpdateRequest)returns(Response);
    rpc delete(Id)returns(Response);
}

service EventService {
    rpc create(EventCreateRequest)returns(Response);
    rpc get(Id)returns(Event);
    rpc update(EventUpdateRequest)returns(Response);
    rpc delete(Id)returns(Response);
}

service PersonsEventsService {
    rpc create(PersonEventCreateRequest)returns(Response);
    rpc get(Id)returns(PersonEvent);
    rpc getByPersonId(Id)returns(PersonEventsGetResponse);
    rpc update(PersonEventUpdateRequest)returns(Response);
    rpc delete(Id)returns(Response);
}

service Calculation {
    rpc get(CalculatedEventGet)returns(EventData);
}

enum Code {
    OK = 0;
    
}
message Empty{}
message Id {
    int64 id = 1;
}
message Response {
    string response = 1;
}

message Person {
    int64 id = 1;
    string name = 2;
    repeated Event events = 3;
}
message Event {
    int64 id = 1;
    string name = 2;
    string date = 3;
    repeated Person persons = 4;
}
message PersonEvent {
    int64 id = 1;
    int64 personId = 2;
    int64 eventId = 3;
    float spent = 4;
    int32 factor = 5;
    Person person = 6;
    Event event = 7;
}
message Recepients {
    map<string,float> recepients = 1;
}
message EventData {
    string event_name = 1;
    string date = 2;
    float average_spent = 3;
    float total_spent = 4;
    int32 persons_count = 5;
    int32 round_rate = 6;
    map<string, Recepients> debetors = 7;
}

message PersonCreateRequest {
    string name = 1;
}
message PersonCreateResponce {
    int64 id = 1;    
}
message PersonUpdateRequest {
    int64 id = 1;
    string name = 2;
}

message EventCreateRequest {
    string name = 1;
    string date = 2;
}
message EventUpdateRequest {
    int64 id = 1;
    string name = 2;
    string date = 3;
}

message PersonEventCreateRequest {
    int64 person_id = 1;
    int64 event_id = 2;
    double spent = 3;
    int32 factor = 4;
}
message PersonEventUpdateRequest {
    int64 id = 1;
    int64 person_id = 2;
    int64 event_id = 3;
    double spent = 4;
    int32 factor = 5;
}
message PersonEventsGetResponse {
    repeated PersonEvent persons_events = 1;
}

message CalculatedEventGet {
    int64 event_id = 1;
    int32 round_rate = 2;
}
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Person_AddPerson_FullMethodName    = "/proto.Person/addPerson"
	Person_GetPerson_FullMethodName    = "/proto.Person/getPerson"
	Person_UpdatePerson_FullMethodName = "/proto.Person/updatePerson"
	Person_DeletePerson_FullMethodName = "/proto.Person/deletePerson"
)

// PersonClient is the client API for Person service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonClient interface {
	AddPerson(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Id, error)
	GetPerson(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PersonData, error)
	UpdatePerson(ctx context.Context, in *PersonData, opts ...grpc.CallOption) (*Error, error)
	DeletePerson(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Error, error)
}

type personClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonClient(cc grpc.ClientConnInterface) PersonClient {
	return &personClient{cc}
}

func (c *personClient) AddPerson(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, Person_AddPerson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personClient) GetPerson(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PersonData, error) {
	out := new(PersonData)
	err := c.cc.Invoke(ctx, Person_GetPerson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personClient) UpdatePerson(ctx context.Context, in *PersonData, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, Person_UpdatePerson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personClient) DeletePerson(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, Person_DeletePerson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonServer is the server API for Person service.
// All implementations must embed UnimplementedPersonServer
// for forward compatibility
type PersonServer interface {
	AddPerson(context.Context, *Name) (*Id, error)
	GetPerson(context.Context, *Id) (*PersonData, error)
	UpdatePerson(context.Context, *PersonData) (*Error, error)
	DeletePerson(context.Context, *Id) (*Error, error)
	mustEmbedUnimplementedPersonServer()
}

// UnimplementedPersonServer must be embedded to have forward compatible implementations.
type UnimplementedPersonServer struct {
}

func (UnimplementedPersonServer) AddPerson(context.Context, *Name) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPerson not implemented")
}
func (UnimplementedPersonServer) GetPerson(context.Context, *Id) (*PersonData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerson not implemented")
}
func (UnimplementedPersonServer) UpdatePerson(context.Context, *PersonData) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePerson not implemented")
}
func (UnimplementedPersonServer) DeletePerson(context.Context, *Id) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePerson not implemented")
}
func (UnimplementedPersonServer) mustEmbedUnimplementedPersonServer() {}

// UnsafePersonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonServer will
// result in compilation errors.
type UnsafePersonServer interface {
	mustEmbedUnimplementedPersonServer()
}

func RegisterPersonServer(s grpc.ServiceRegistrar, srv PersonServer) {
	s.RegisterService(&Person_ServiceDesc, srv)
}

func _Person_AddPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServer).AddPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Person_AddPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServer).AddPerson(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _Person_GetPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServer).GetPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Person_GetPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServer).GetPerson(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Person_UpdatePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServer).UpdatePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Person_UpdatePerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServer).UpdatePerson(ctx, req.(*PersonData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Person_DeletePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServer).DeletePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Person_DeletePerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServer).DeletePerson(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// Person_ServiceDesc is the grpc.ServiceDesc for Person service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Person_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Person",
	HandlerType: (*PersonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addPerson",
			Handler:    _Person_AddPerson_Handler,
		},
		{
			MethodName: "getPerson",
			Handler:    _Person_GetPerson_Handler,
		},
		{
			MethodName: "updatePerson",
			Handler:    _Person_UpdatePerson_Handler,
		},
		{
			MethodName: "deletePerson",
			Handler:    _Person_DeletePerson_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

const (
	Event_AddEvent_FullMethodName    = "/proto.Event/addEvent"
	Event_GetEvent_FullMethodName    = "/proto.Event/getEvent"
	Event_UpdateEvent_FullMethodName = "/proto.Event/updateEvent"
	Event_DeleteEvent_FullMethodName = "/proto.Event/deleteEvent"
)

// EventClient is the client API for Event service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventClient interface {
	AddEvent(ctx context.Context, in *EventData, opts ...grpc.CallOption) (*Id, error)
	GetEvent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*EventData, error)
	UpdateEvent(ctx context.Context, in *EventData, opts ...grpc.CallOption) (*Error, error)
	DeleteEvent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Error, error)
}

type eventClient struct {
	cc grpc.ClientConnInterface
}

func NewEventClient(cc grpc.ClientConnInterface) EventClient {
	return &eventClient{cc}
}

func (c *eventClient) AddEvent(ctx context.Context, in *EventData, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, Event_AddEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) GetEvent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*EventData, error) {
	out := new(EventData)
	err := c.cc.Invoke(ctx, Event_GetEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) UpdateEvent(ctx context.Context, in *EventData, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, Event_UpdateEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) DeleteEvent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, Event_DeleteEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServer is the server API for Event service.
// All implementations must embed UnimplementedEventServer
// for forward compatibility
type EventServer interface {
	AddEvent(context.Context, *EventData) (*Id, error)
	GetEvent(context.Context, *Id) (*EventData, error)
	UpdateEvent(context.Context, *EventData) (*Error, error)
	DeleteEvent(context.Context, *Id) (*Error, error)
	mustEmbedUnimplementedEventServer()
}

// UnimplementedEventServer must be embedded to have forward compatible implementations.
type UnimplementedEventServer struct {
}

func (UnimplementedEventServer) AddEvent(context.Context, *EventData) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEvent not implemented")
}
func (UnimplementedEventServer) GetEvent(context.Context, *Id) (*EventData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedEventServer) UpdateEvent(context.Context, *EventData) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (UnimplementedEventServer) DeleteEvent(context.Context, *Id) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (UnimplementedEventServer) mustEmbedUnimplementedEventServer() {}

// UnsafeEventServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServer will
// result in compilation errors.
type UnsafeEventServer interface {
	mustEmbedUnimplementedEventServer()
}

func RegisterEventServer(s grpc.ServiceRegistrar, srv EventServer) {
	s.RegisterService(&Event_ServiceDesc, srv)
}

func _Event_AddEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).AddEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Event_AddEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).AddEvent(ctx, req.(*EventData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Event_GetEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).GetEvent(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Event_UpdateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).UpdateEvent(ctx, req.(*EventData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Event_DeleteEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).DeleteEvent(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// Event_ServiceDesc is the grpc.ServiceDesc for Event service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Event_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Event",
	HandlerType: (*EventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addEvent",
			Handler:    _Event_AddEvent_Handler,
		},
		{
			MethodName: "getEvent",
			Handler:    _Event_GetEvent_Handler,
		},
		{
			MethodName: "updateEvent",
			Handler:    _Event_UpdateEvent_Handler,
		},
		{
			MethodName: "deleteEvent",
			Handler:    _Event_DeleteEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

const (
	PersonsEvents_AddPersonToPersonsEvent_FullMethodName = "/proto.PersonsEvents/addPersonToPersonsEvent"
	PersonsEvents_GetByPersonId_FullMethodName           = "/proto.PersonsEvents/getByPersonId"
	PersonsEvents_GetByEventId_FullMethodName            = "/proto.PersonsEvents/getByEventId"
	PersonsEvents_UpdatePersonsEvents_FullMethodName     = "/proto.PersonsEvents/updatePersonsEvents"
	PersonsEvents_DeletePersonsEvents_FullMethodName     = "/proto.PersonsEvents/deletePersonsEvents"
)

// PersonsEventsClient is the client API for PersonsEvents service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonsEventsClient interface {
	AddPersonToPersonsEvent(ctx context.Context, in *PersonsEventsInfo, opts ...grpc.CallOption) (*Id, error)
	GetByPersonId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PersonsEventsInfo, error)
	GetByEventId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PersonsEventsInfo, error)
	UpdatePersonsEvents(ctx context.Context, in *PersonsEventsInfo, opts ...grpc.CallOption) (*Error, error)
	DeletePersonsEvents(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Error, error)
}

type personsEventsClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonsEventsClient(cc grpc.ClientConnInterface) PersonsEventsClient {
	return &personsEventsClient{cc}
}

func (c *personsEventsClient) AddPersonToPersonsEvent(ctx context.Context, in *PersonsEventsInfo, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, PersonsEvents_AddPersonToPersonsEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personsEventsClient) GetByPersonId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PersonsEventsInfo, error) {
	out := new(PersonsEventsInfo)
	err := c.cc.Invoke(ctx, PersonsEvents_GetByPersonId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personsEventsClient) GetByEventId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PersonsEventsInfo, error) {
	out := new(PersonsEventsInfo)
	err := c.cc.Invoke(ctx, PersonsEvents_GetByEventId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personsEventsClient) UpdatePersonsEvents(ctx context.Context, in *PersonsEventsInfo, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, PersonsEvents_UpdatePersonsEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personsEventsClient) DeletePersonsEvents(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, PersonsEvents_DeletePersonsEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonsEventsServer is the server API for PersonsEvents service.
// All implementations must embed UnimplementedPersonsEventsServer
// for forward compatibility
type PersonsEventsServer interface {
	AddPersonToPersonsEvent(context.Context, *PersonsEventsInfo) (*Id, error)
	GetByPersonId(context.Context, *Id) (*PersonsEventsInfo, error)
	GetByEventId(context.Context, *Id) (*PersonsEventsInfo, error)
	UpdatePersonsEvents(context.Context, *PersonsEventsInfo) (*Error, error)
	DeletePersonsEvents(context.Context, *Id) (*Error, error)
	mustEmbedUnimplementedPersonsEventsServer()
}

// UnimplementedPersonsEventsServer must be embedded to have forward compatible implementations.
type UnimplementedPersonsEventsServer struct {
}

func (UnimplementedPersonsEventsServer) AddPersonToPersonsEvent(context.Context, *PersonsEventsInfo) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPersonToPersonsEvent not implemented")
}
func (UnimplementedPersonsEventsServer) GetByPersonId(context.Context, *Id) (*PersonsEventsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByPersonId not implemented")
}
func (UnimplementedPersonsEventsServer) GetByEventId(context.Context, *Id) (*PersonsEventsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByEventId not implemented")
}
func (UnimplementedPersonsEventsServer) UpdatePersonsEvents(context.Context, *PersonsEventsInfo) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePersonsEvents not implemented")
}
func (UnimplementedPersonsEventsServer) DeletePersonsEvents(context.Context, *Id) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePersonsEvents not implemented")
}
func (UnimplementedPersonsEventsServer) mustEmbedUnimplementedPersonsEventsServer() {}

// UnsafePersonsEventsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonsEventsServer will
// result in compilation errors.
type UnsafePersonsEventsServer interface {
	mustEmbedUnimplementedPersonsEventsServer()
}

func RegisterPersonsEventsServer(s grpc.ServiceRegistrar, srv PersonsEventsServer) {
	s.RegisterService(&PersonsEvents_ServiceDesc, srv)
}

func _PersonsEvents_AddPersonToPersonsEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonsEventsInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonsEventsServer).AddPersonToPersonsEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonsEvents_AddPersonToPersonsEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonsEventsServer).AddPersonToPersonsEvent(ctx, req.(*PersonsEventsInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonsEvents_GetByPersonId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonsEventsServer).GetByPersonId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonsEvents_GetByPersonId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonsEventsServer).GetByPersonId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonsEvents_GetByEventId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonsEventsServer).GetByEventId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonsEvents_GetByEventId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonsEventsServer).GetByEventId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonsEvents_UpdatePersonsEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonsEventsInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonsEventsServer).UpdatePersonsEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonsEvents_UpdatePersonsEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonsEventsServer).UpdatePersonsEvents(ctx, req.(*PersonsEventsInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonsEvents_DeletePersonsEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonsEventsServer).DeletePersonsEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonsEvents_DeletePersonsEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonsEventsServer).DeletePersonsEvents(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonsEvents_ServiceDesc is the grpc.ServiceDesc for PersonsEvents service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonsEvents_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PersonsEvents",
	HandlerType: (*PersonsEventsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addPersonToPersonsEvent",
			Handler:    _PersonsEvents_AddPersonToPersonsEvent_Handler,
		},
		{
			MethodName: "getByPersonId",
			Handler:    _PersonsEvents_GetByPersonId_Handler,
		},
		{
			MethodName: "getByEventId",
			Handler:    _PersonsEvents_GetByEventId_Handler,
		},
		{
			MethodName: "updatePersonsEvents",
			Handler:    _PersonsEvents_UpdatePersonsEvents_Handler,
		},
		{
			MethodName: "deletePersonsEvents",
			Handler:    _PersonsEvents_DeletePersonsEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

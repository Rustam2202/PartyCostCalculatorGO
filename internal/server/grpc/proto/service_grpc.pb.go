// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0--rc1
// source: protobuf/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PersonService_Create_FullMethodName = "/proto.PersonService/create"
	PersonService_Get_FullMethodName    = "/proto.PersonService/get"
	PersonService_Update_FullMethodName = "/proto.PersonService/update"
	PersonService_Delete_FullMethodName = "/proto.PersonService/delete"
)

// PersonServiceClient is the client API for PersonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonServiceClient interface {
	Create(ctx context.Context, in *PersonCreateRequest, opts ...grpc.CallOption) (*Response, error)
	Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Person, error)
	Update(ctx context.Context, in *PersonUpdateRequest, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error)
}

type personServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonServiceClient(cc grpc.ClientConnInterface) PersonServiceClient {
	return &personServiceClient{cc}
}

func (c *personServiceClient) Create(ctx context.Context, in *PersonCreateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, PersonService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := c.cc.Invoke(ctx, PersonService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) Update(ctx context.Context, in *PersonUpdateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, PersonService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, PersonService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonServiceServer is the server API for PersonService service.
// All implementations must embed UnimplementedPersonServiceServer
// for forward compatibility
type PersonServiceServer interface {
	Create(context.Context, *PersonCreateRequest) (*Response, error)
	Get(context.Context, *Id) (*Person, error)
	Update(context.Context, *PersonUpdateRequest) (*Response, error)
	Delete(context.Context, *Id) (*Response, error)
	mustEmbedUnimplementedPersonServiceServer()
}

// UnimplementedPersonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPersonServiceServer struct {
}

func (UnimplementedPersonServiceServer) Create(context.Context, *PersonCreateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPersonServiceServer) Get(context.Context, *Id) (*Person, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPersonServiceServer) Update(context.Context, *PersonUpdateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPersonServiceServer) Delete(context.Context, *Id) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPersonServiceServer) mustEmbedUnimplementedPersonServiceServer() {}

// UnsafePersonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonServiceServer will
// result in compilation errors.
type UnsafePersonServiceServer interface {
	mustEmbedUnimplementedPersonServiceServer()
}

func RegisterPersonServiceServer(s grpc.ServiceRegistrar, srv PersonServiceServer) {
	s.RegisterService(&PersonService_ServiceDesc, srv)
}

func _PersonService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).Create(ctx, req.(*PersonCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).Get(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).Update(ctx, req.(*PersonUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonService_ServiceDesc is the grpc.ServiceDesc for PersonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PersonService",
	HandlerType: (*PersonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _PersonService_Create_Handler,
		},
		{
			MethodName: "get",
			Handler:    _PersonService_Get_Handler,
		},
		{
			MethodName: "update",
			Handler:    _PersonService_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _PersonService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/service.proto",
}

const (
	EventService_Create_FullMethodName = "/proto.EventService/create"
	EventService_Get_FullMethodName    = "/proto.EventService/get"
	EventService_Update_FullMethodName = "/proto.EventService/update"
	EventService_Delete_FullMethodName = "/proto.EventService/delete"
)

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventServiceClient interface {
	Create(ctx context.Context, in *EventCreateRequest, opts ...grpc.CallOption) (*Response, error)
	Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Event, error)
	Update(ctx context.Context, in *EventUpdateRequest, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) Create(ctx context.Context, in *EventCreateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, EventService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, EventService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) Update(ctx context.Context, in *EventUpdateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, EventService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, EventService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServiceServer is the server API for EventService service.
// All implementations must embed UnimplementedEventServiceServer
// for forward compatibility
type EventServiceServer interface {
	Create(context.Context, *EventCreateRequest) (*Response, error)
	Get(context.Context, *Id) (*Event, error)
	Update(context.Context, *EventUpdateRequest) (*Response, error)
	Delete(context.Context, *Id) (*Response, error)
	mustEmbedUnimplementedEventServiceServer()
}

// UnimplementedEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventServiceServer struct {
}

func (UnimplementedEventServiceServer) Create(context.Context, *EventCreateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEventServiceServer) Get(context.Context, *Id) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedEventServiceServer) Update(context.Context, *EventUpdateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEventServiceServer) Delete(context.Context, *Id) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEventServiceServer) mustEmbedUnimplementedEventServiceServer() {}

// UnsafeEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServiceServer will
// result in compilation errors.
type UnsafeEventServiceServer interface {
	mustEmbedUnimplementedEventServiceServer()
}

func RegisterEventServiceServer(s grpc.ServiceRegistrar, srv EventServiceServer) {
	s.RegisterService(&EventService_ServiceDesc, srv)
}

func _EventService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).Create(ctx, req.(*EventCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).Get(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).Update(ctx, req.(*EventUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// EventService_ServiceDesc is the grpc.ServiceDesc for EventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _EventService_Create_Handler,
		},
		{
			MethodName: "get",
			Handler:    _EventService_Get_Handler,
		},
		{
			MethodName: "update",
			Handler:    _EventService_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _EventService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/service.proto",
}

const (
	PersonsEventsService_Create_FullMethodName        = "/proto.PersonsEventsService/create"
	PersonsEventsService_Get_FullMethodName           = "/proto.PersonsEventsService/get"
	PersonsEventsService_GetByPersonId_FullMethodName = "/proto.PersonsEventsService/getByPersonId"
	PersonsEventsService_Update_FullMethodName        = "/proto.PersonsEventsService/update"
	PersonsEventsService_Delete_FullMethodName        = "/proto.PersonsEventsService/delete"
)

// PersonsEventsServiceClient is the client API for PersonsEventsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonsEventsServiceClient interface {
	Create(ctx context.Context, in *PersonEventCreateRequest, opts ...grpc.CallOption) (*Response, error)
	Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PersonEvent, error)
	GetByPersonId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PersonEventsGetResponse, error)
	Update(ctx context.Context, in *PersonEventUpdateRequest, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error)
}

type personsEventsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonsEventsServiceClient(cc grpc.ClientConnInterface) PersonsEventsServiceClient {
	return &personsEventsServiceClient{cc}
}

func (c *personsEventsServiceClient) Create(ctx context.Context, in *PersonEventCreateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, PersonsEventsService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personsEventsServiceClient) Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PersonEvent, error) {
	out := new(PersonEvent)
	err := c.cc.Invoke(ctx, PersonsEventsService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personsEventsServiceClient) GetByPersonId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PersonEventsGetResponse, error) {
	out := new(PersonEventsGetResponse)
	err := c.cc.Invoke(ctx, PersonsEventsService_GetByPersonId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personsEventsServiceClient) Update(ctx context.Context, in *PersonEventUpdateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, PersonsEventsService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personsEventsServiceClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, PersonsEventsService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonsEventsServiceServer is the server API for PersonsEventsService service.
// All implementations must embed UnimplementedPersonsEventsServiceServer
// for forward compatibility
type PersonsEventsServiceServer interface {
	Create(context.Context, *PersonEventCreateRequest) (*Response, error)
	Get(context.Context, *Id) (*PersonEvent, error)
	GetByPersonId(context.Context, *Id) (*PersonEventsGetResponse, error)
	Update(context.Context, *PersonEventUpdateRequest) (*Response, error)
	Delete(context.Context, *Id) (*Response, error)
	mustEmbedUnimplementedPersonsEventsServiceServer()
}

// UnimplementedPersonsEventsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPersonsEventsServiceServer struct {
}

func (UnimplementedPersonsEventsServiceServer) Create(context.Context, *PersonEventCreateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPersonsEventsServiceServer) Get(context.Context, *Id) (*PersonEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPersonsEventsServiceServer) GetByPersonId(context.Context, *Id) (*PersonEventsGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByPersonId not implemented")
}
func (UnimplementedPersonsEventsServiceServer) Update(context.Context, *PersonEventUpdateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPersonsEventsServiceServer) Delete(context.Context, *Id) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPersonsEventsServiceServer) mustEmbedUnimplementedPersonsEventsServiceServer() {}

// UnsafePersonsEventsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonsEventsServiceServer will
// result in compilation errors.
type UnsafePersonsEventsServiceServer interface {
	mustEmbedUnimplementedPersonsEventsServiceServer()
}

func RegisterPersonsEventsServiceServer(s grpc.ServiceRegistrar, srv PersonsEventsServiceServer) {
	s.RegisterService(&PersonsEventsService_ServiceDesc, srv)
}

func _PersonsEventsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonEventCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonsEventsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonsEventsService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonsEventsServiceServer).Create(ctx, req.(*PersonEventCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonsEventsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonsEventsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonsEventsService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonsEventsServiceServer).Get(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonsEventsService_GetByPersonId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonsEventsServiceServer).GetByPersonId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonsEventsService_GetByPersonId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonsEventsServiceServer).GetByPersonId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonsEventsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonEventUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonsEventsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonsEventsService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonsEventsServiceServer).Update(ctx, req.(*PersonEventUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonsEventsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonsEventsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonsEventsService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonsEventsServiceServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonsEventsService_ServiceDesc is the grpc.ServiceDesc for PersonsEventsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonsEventsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PersonsEventsService",
	HandlerType: (*PersonsEventsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _PersonsEventsService_Create_Handler,
		},
		{
			MethodName: "get",
			Handler:    _PersonsEventsService_Get_Handler,
		},
		{
			MethodName: "getByPersonId",
			Handler:    _PersonsEventsService_GetByPersonId_Handler,
		},
		{
			MethodName: "update",
			Handler:    _PersonsEventsService_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _PersonsEventsService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/service.proto",
}

const (
	Calculation_Get_FullMethodName = "/proto.Calculation/get"
)

// CalculationClient is the client API for Calculation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculationClient interface {
	Get(ctx context.Context, in *CalculatedEventGet, opts ...grpc.CallOption) (*EventData, error)
}

type calculationClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculationClient(cc grpc.ClientConnInterface) CalculationClient {
	return &calculationClient{cc}
}

func (c *calculationClient) Get(ctx context.Context, in *CalculatedEventGet, opts ...grpc.CallOption) (*EventData, error) {
	out := new(EventData)
	err := c.cc.Invoke(ctx, Calculation_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculationServer is the server API for Calculation service.
// All implementations must embed UnimplementedCalculationServer
// for forward compatibility
type CalculationServer interface {
	Get(context.Context, *CalculatedEventGet) (*EventData, error)
	mustEmbedUnimplementedCalculationServer()
}

// UnimplementedCalculationServer must be embedded to have forward compatible implementations.
type UnimplementedCalculationServer struct {
}

func (UnimplementedCalculationServer) Get(context.Context, *CalculatedEventGet) (*EventData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCalculationServer) mustEmbedUnimplementedCalculationServer() {}

// UnsafeCalculationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculationServer will
// result in compilation errors.
type UnsafeCalculationServer interface {
	mustEmbedUnimplementedCalculationServer()
}

func RegisterCalculationServer(s grpc.ServiceRegistrar, srv CalculationServer) {
	s.RegisterService(&Calculation_ServiceDesc, srv)
}

func _Calculation_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculatedEventGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calculation_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationServer).Get(ctx, req.(*CalculatedEventGet))
	}
	return interceptor(ctx, in, info, handler)
}

// Calculation_ServiceDesc is the grpc.ServiceDesc for Calculation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Calculation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Calculation",
	HandlerType: (*CalculationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get",
			Handler:    _Calculation_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/service.proto",
}

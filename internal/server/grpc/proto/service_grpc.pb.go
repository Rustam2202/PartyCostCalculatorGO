// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: protobuf/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PersonService_AddPerson_FullMethodName    = "/proto.PersonService/addPerson"
	PersonService_GetPerson_FullMethodName    = "/proto.PersonService/getPerson"
	PersonService_UpdatePerson_FullMethodName = "/proto.PersonService/updatePerson"
	PersonService_DeletePerson_FullMethodName = "/proto.PersonService/deletePerson"
)

// PersonServiceClient is the client API for PersonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonServiceClient interface {
	AddPerson(ctx context.Context, in *PersonCreateRequest, opts ...grpc.CallOption) (*Response, error)
	GetPerson(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Person, error)
	UpdatePerson(ctx context.Context, in *PersonUpdateRequest, opts ...grpc.CallOption) (*Response, error)
	DeletePerson(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error)
}

type personServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonServiceClient(cc grpc.ClientConnInterface) PersonServiceClient {
	return &personServiceClient{cc}
}

func (c *personServiceClient) AddPerson(ctx context.Context, in *PersonCreateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, PersonService_AddPerson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) GetPerson(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := c.cc.Invoke(ctx, PersonService_GetPerson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) UpdatePerson(ctx context.Context, in *PersonUpdateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, PersonService_UpdatePerson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) DeletePerson(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, PersonService_DeletePerson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonServiceServer is the server API for PersonService service.
// All implementations must embed UnimplementedPersonServiceServer
// for forward compatibility
type PersonServiceServer interface {
	AddPerson(context.Context, *PersonCreateRequest) (*Response, error)
	GetPerson(context.Context, *Id) (*Person, error)
	UpdatePerson(context.Context, *PersonUpdateRequest) (*Response, error)
	DeletePerson(context.Context, *Id) (*Response, error)
	mustEmbedUnimplementedPersonServiceServer()
}

// UnimplementedPersonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPersonServiceServer struct {
}

func (UnimplementedPersonServiceServer) AddPerson(context.Context, *PersonCreateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPerson not implemented")
}
func (UnimplementedPersonServiceServer) GetPerson(context.Context, *Id) (*Person, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerson not implemented")
}
func (UnimplementedPersonServiceServer) UpdatePerson(context.Context, *PersonUpdateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePerson not implemented")
}
func (UnimplementedPersonServiceServer) DeletePerson(context.Context, *Id) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePerson not implemented")
}
func (UnimplementedPersonServiceServer) mustEmbedUnimplementedPersonServiceServer() {}

// UnsafePersonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonServiceServer will
// result in compilation errors.
type UnsafePersonServiceServer interface {
	mustEmbedUnimplementedPersonServiceServer()
}

func RegisterPersonServiceServer(s grpc.ServiceRegistrar, srv PersonServiceServer) {
	s.RegisterService(&PersonService_ServiceDesc, srv)
}

func _PersonService_AddPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).AddPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_AddPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).AddPerson(ctx, req.(*PersonCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_GetPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).GetPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_GetPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).GetPerson(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_UpdatePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).UpdatePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_UpdatePerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).UpdatePerson(ctx, req.(*PersonUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_DeletePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).DeletePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_DeletePerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).DeletePerson(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonService_ServiceDesc is the grpc.ServiceDesc for PersonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PersonService",
	HandlerType: (*PersonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addPerson",
			Handler:    _PersonService_AddPerson_Handler,
		},
		{
			MethodName: "getPerson",
			Handler:    _PersonService_GetPerson_Handler,
		},
		{
			MethodName: "updatePerson",
			Handler:    _PersonService_UpdatePerson_Handler,
		},
		{
			MethodName: "deletePerson",
			Handler:    _PersonService_DeletePerson_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/service.proto",
}

const (
	EventService_AddEvent_FullMethodName    = "/proto.EventService/addEvent"
	EventService_GetEvent_FullMethodName    = "/proto.EventService/getEvent"
	EventService_UpdateEvent_FullMethodName = "/proto.EventService/updateEvent"
	EventService_DeleteEvent_FullMethodName = "/proto.EventService/deleteEvent"
)

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventServiceClient interface {
	AddEvent(ctx context.Context, in *EventCreateRequest, opts ...grpc.CallOption) (*Response, error)
	GetEvent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Event, error)
	UpdateEvent(ctx context.Context, in *EventUpdate, opts ...grpc.CallOption) (*Response, error)
	DeleteEvent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) AddEvent(ctx context.Context, in *EventCreateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, EventService_AddEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) GetEvent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, EventService_GetEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) UpdateEvent(ctx context.Context, in *EventUpdate, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, EventService_UpdateEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) DeleteEvent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, EventService_DeleteEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServiceServer is the server API for EventService service.
// All implementations must embed UnimplementedEventServiceServer
// for forward compatibility
type EventServiceServer interface {
	AddEvent(context.Context, *EventCreateRequest) (*Response, error)
	GetEvent(context.Context, *Id) (*Event, error)
	UpdateEvent(context.Context, *EventUpdate) (*Response, error)
	DeleteEvent(context.Context, *Id) (*Response, error)
	mustEmbedUnimplementedEventServiceServer()
}

// UnimplementedEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventServiceServer struct {
}

func (UnimplementedEventServiceServer) AddEvent(context.Context, *EventCreateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEvent not implemented")
}
func (UnimplementedEventServiceServer) GetEvent(context.Context, *Id) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedEventServiceServer) UpdateEvent(context.Context, *EventUpdate) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (UnimplementedEventServiceServer) DeleteEvent(context.Context, *Id) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (UnimplementedEventServiceServer) mustEmbedUnimplementedEventServiceServer() {}

// UnsafeEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServiceServer will
// result in compilation errors.
type UnsafeEventServiceServer interface {
	mustEmbedUnimplementedEventServiceServer()
}

func RegisterEventServiceServer(s grpc.ServiceRegistrar, srv EventServiceServer) {
	s.RegisterService(&EventService_ServiceDesc, srv)
}

func _EventService_AddEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).AddEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_AddEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).AddEvent(ctx, req.(*EventCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_GetEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetEvent(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_UpdateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).UpdateEvent(ctx, req.(*EventUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_DeleteEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).DeleteEvent(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// EventService_ServiceDesc is the grpc.ServiceDesc for EventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addEvent",
			Handler:    _EventService_AddEvent_Handler,
		},
		{
			MethodName: "getEvent",
			Handler:    _EventService_GetEvent_Handler,
		},
		{
			MethodName: "updateEvent",
			Handler:    _EventService_UpdateEvent_Handler,
		},
		{
			MethodName: "deleteEvent",
			Handler:    _EventService_DeleteEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/service.proto",
}

const (
	PersonsEventsService_AddPersonToPersonsEvent_FullMethodName = "/proto.PersonsEventsService/addPersonToPersonsEvent"
	PersonsEventsService_GetByPersonId_FullMethodName           = "/proto.PersonsEventsService/getByPersonId"
	PersonsEventsService_GetByEventId_FullMethodName            = "/proto.PersonsEventsService/getByEventId"
	PersonsEventsService_UpdatePersonsEvents_FullMethodName     = "/proto.PersonsEventsService/updatePersonsEvents"
	PersonsEventsService_DeletePersonsEvents_FullMethodName     = "/proto.PersonsEventsService/deletePersonsEvents"
)

// PersonsEventsServiceClient is the client API for PersonsEventsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonsEventsServiceClient interface {
	AddPersonToPersonsEvent(ctx context.Context, in *PersonEventCreateRequest, opts ...grpc.CallOption) (*Response, error)
	GetByPersonId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PersonEventsGetResponse, error)
	GetByEventId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PersonEventsGetResponse, error)
	UpdatePersonsEvents(ctx context.Context, in *PersonEventUpdateRequest, opts ...grpc.CallOption) (*Response, error)
	DeletePersonsEvents(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error)
}

type personsEventsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonsEventsServiceClient(cc grpc.ClientConnInterface) PersonsEventsServiceClient {
	return &personsEventsServiceClient{cc}
}

func (c *personsEventsServiceClient) AddPersonToPersonsEvent(ctx context.Context, in *PersonEventCreateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, PersonsEventsService_AddPersonToPersonsEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personsEventsServiceClient) GetByPersonId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PersonEventsGetResponse, error) {
	out := new(PersonEventsGetResponse)
	err := c.cc.Invoke(ctx, PersonsEventsService_GetByPersonId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personsEventsServiceClient) GetByEventId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PersonEventsGetResponse, error) {
	out := new(PersonEventsGetResponse)
	err := c.cc.Invoke(ctx, PersonsEventsService_GetByEventId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personsEventsServiceClient) UpdatePersonsEvents(ctx context.Context, in *PersonEventUpdateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, PersonsEventsService_UpdatePersonsEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personsEventsServiceClient) DeletePersonsEvents(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, PersonsEventsService_DeletePersonsEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonsEventsServiceServer is the server API for PersonsEventsService service.
// All implementations must embed UnimplementedPersonsEventsServiceServer
// for forward compatibility
type PersonsEventsServiceServer interface {
	AddPersonToPersonsEvent(context.Context, *PersonEventCreateRequest) (*Response, error)
	GetByPersonId(context.Context, *Id) (*PersonEventsGetResponse, error)
	GetByEventId(context.Context, *Id) (*PersonEventsGetResponse, error)
	UpdatePersonsEvents(context.Context, *PersonEventUpdateRequest) (*Response, error)
	DeletePersonsEvents(context.Context, *Id) (*Response, error)
	mustEmbedUnimplementedPersonsEventsServiceServer()
}

// UnimplementedPersonsEventsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPersonsEventsServiceServer struct {
}

func (UnimplementedPersonsEventsServiceServer) AddPersonToPersonsEvent(context.Context, *PersonEventCreateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPersonToPersonsEvent not implemented")
}
func (UnimplementedPersonsEventsServiceServer) GetByPersonId(context.Context, *Id) (*PersonEventsGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByPersonId not implemented")
}
func (UnimplementedPersonsEventsServiceServer) GetByEventId(context.Context, *Id) (*PersonEventsGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByEventId not implemented")
}
func (UnimplementedPersonsEventsServiceServer) UpdatePersonsEvents(context.Context, *PersonEventUpdateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePersonsEvents not implemented")
}
func (UnimplementedPersonsEventsServiceServer) DeletePersonsEvents(context.Context, *Id) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePersonsEvents not implemented")
}
func (UnimplementedPersonsEventsServiceServer) mustEmbedUnimplementedPersonsEventsServiceServer() {}

// UnsafePersonsEventsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonsEventsServiceServer will
// result in compilation errors.
type UnsafePersonsEventsServiceServer interface {
	mustEmbedUnimplementedPersonsEventsServiceServer()
}

func RegisterPersonsEventsServiceServer(s grpc.ServiceRegistrar, srv PersonsEventsServiceServer) {
	s.RegisterService(&PersonsEventsService_ServiceDesc, srv)
}

func _PersonsEventsService_AddPersonToPersonsEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonEventCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonsEventsServiceServer).AddPersonToPersonsEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonsEventsService_AddPersonToPersonsEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonsEventsServiceServer).AddPersonToPersonsEvent(ctx, req.(*PersonEventCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonsEventsService_GetByPersonId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonsEventsServiceServer).GetByPersonId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonsEventsService_GetByPersonId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonsEventsServiceServer).GetByPersonId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonsEventsService_GetByEventId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonsEventsServiceServer).GetByEventId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonsEventsService_GetByEventId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonsEventsServiceServer).GetByEventId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonsEventsService_UpdatePersonsEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonEventUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonsEventsServiceServer).UpdatePersonsEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonsEventsService_UpdatePersonsEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonsEventsServiceServer).UpdatePersonsEvents(ctx, req.(*PersonEventUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonsEventsService_DeletePersonsEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonsEventsServiceServer).DeletePersonsEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonsEventsService_DeletePersonsEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonsEventsServiceServer).DeletePersonsEvents(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonsEventsService_ServiceDesc is the grpc.ServiceDesc for PersonsEventsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonsEventsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PersonsEventsService",
	HandlerType: (*PersonsEventsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addPersonToPersonsEvent",
			Handler:    _PersonsEventsService_AddPersonToPersonsEvent_Handler,
		},
		{
			MethodName: "getByPersonId",
			Handler:    _PersonsEventsService_GetByPersonId_Handler,
		},
		{
			MethodName: "getByEventId",
			Handler:    _PersonsEventsService_GetByEventId_Handler,
		},
		{
			MethodName: "updatePersonsEvents",
			Handler:    _PersonsEventsService_UpdatePersonsEvents_Handler,
		},
		{
			MethodName: "deletePersonsEvents",
			Handler:    _PersonsEventsService_DeletePersonsEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/service.proto",
}

const (
	Calculation_GetCalculatedEvent_FullMethodName = "/proto.Calculation/getCalculatedEvent"
)

// CalculationClient is the client API for Calculation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculationClient interface {
	GetCalculatedEvent(ctx context.Context, in *CalculatedEventGet, opts ...grpc.CallOption) (*EventData, error)
}

type calculationClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculationClient(cc grpc.ClientConnInterface) CalculationClient {
	return &calculationClient{cc}
}

func (c *calculationClient) GetCalculatedEvent(ctx context.Context, in *CalculatedEventGet, opts ...grpc.CallOption) (*EventData, error) {
	out := new(EventData)
	err := c.cc.Invoke(ctx, Calculation_GetCalculatedEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculationServer is the server API for Calculation service.
// All implementations must embed UnimplementedCalculationServer
// for forward compatibility
type CalculationServer interface {
	GetCalculatedEvent(context.Context, *CalculatedEventGet) (*EventData, error)
	mustEmbedUnimplementedCalculationServer()
}

// UnimplementedCalculationServer must be embedded to have forward compatible implementations.
type UnimplementedCalculationServer struct {
}

func (UnimplementedCalculationServer) GetCalculatedEvent(context.Context, *CalculatedEventGet) (*EventData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCalculatedEvent not implemented")
}
func (UnimplementedCalculationServer) mustEmbedUnimplementedCalculationServer() {}

// UnsafeCalculationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculationServer will
// result in compilation errors.
type UnsafeCalculationServer interface {
	mustEmbedUnimplementedCalculationServer()
}

func RegisterCalculationServer(s grpc.ServiceRegistrar, srv CalculationServer) {
	s.RegisterService(&Calculation_ServiceDesc, srv)
}

func _Calculation_GetCalculatedEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculatedEventGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationServer).GetCalculatedEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calculation_GetCalculatedEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationServer).GetCalculatedEvent(ctx, req.(*CalculatedEventGet))
	}
	return interceptor(ctx, in, info, handler)
}

// Calculation_ServiceDesc is the grpc.ServiceDesc for Calculation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Calculation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Calculation",
	HandlerType: (*CalculationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getCalculatedEvent",
			Handler:    _Calculation_GetCalculatedEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/service.proto",
}
